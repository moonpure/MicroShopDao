<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.microshop.servicedao.mapper.MalluserloginMapper" >
  <resultMap id="BaseResultMap" type="com.microshop.servicedao.model.Malluserlogin" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="userId" property="userid" jdbcType="BIGINT" />
    <result column="loginName" property="loginname" jdbcType="VARCHAR" />
    <result column="loginPwd" property="loginpwd" jdbcType="VARCHAR" />
    <result column="loginType" property="logintype" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="createTime" property="createtime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, userId, loginName, loginPwd, loginType, state, createTime
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from mallUserLogin
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from mallUserLogin
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.microshop.servicedao.model.Malluserlogin" >
    insert into mallUserLogin (id, userId, loginName, 
      loginPwd, loginType, state, 
      createTime)
    values (#{id,jdbcType=BIGINT}, #{userid,jdbcType=BIGINT}, #{loginname,jdbcType=VARCHAR}, 
      #{loginpwd,jdbcType=VARCHAR}, #{logintype,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}, 
      #{createtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.microshop.servicedao.model.Malluserlogin" >
    insert into mallUserLogin
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userid != null" >
        userId,
      </if>
      <if test="loginname != null" >
        loginName,
      </if>
      <if test="loginpwd != null" >
        loginPwd,
      </if>
      <if test="logintype != null" >
        loginType,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="createtime != null" >
        createTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=BIGINT},
      </if>
      <if test="loginname != null" >
        #{loginname,jdbcType=VARCHAR},
      </if>
      <if test="loginpwd != null" >
        #{loginpwd,jdbcType=VARCHAR},
      </if>
      <if test="logintype != null" >
        #{logintype,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.microshop.servicedao.model.Malluserlogin" >
    update mallUserLogin
    <set >
      <if test="userid != null" >
        userId = #{userid,jdbcType=BIGINT},
      </if>
      <if test="loginname != null" >
        loginName = #{loginname,jdbcType=VARCHAR},
      </if>
      <if test="loginpwd != null" >
        loginPwd = #{loginpwd,jdbcType=VARCHAR},
      </if>
      <if test="logintype != null" >
        loginType = #{logintype,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="createtime != null" >
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.microshop.servicedao.model.Malluserlogin" >
    update mallUserLogin
    set userId = #{userid,jdbcType=BIGINT},
      loginName = #{loginname,jdbcType=VARCHAR},
      loginPwd = #{loginpwd,jdbcType=VARCHAR},
      loginType = #{logintype,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      createTime = #{createtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>